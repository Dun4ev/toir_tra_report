diff --git a/index_folder_builder.py b/index_folder_builder.py
index 9f44c69..bb1d8b7 100644
--- a/index_folder_builder.py
+++ b/index_folder_builder.py
@@ -4,7 +4,7 @@ import re
 import shutil
 from collections import defaultdict
 from pathlib import Path
-from typing import Callable
+from typing import Callable, TypedDict
 
 from openpyxl import load_workbook
 from openpyxl.utils.cell import column_index_from_string
@@ -29,24 +29,76 @@ RE_INDEX_CODE = re.compile(
 # --- ╨¥╨░╤ü╤é╤Ç╨╛╨╣╨║╨╕ ╤ü╨┐╤Ç╨░╨▓╨╛╤ç╨╜╨╕╨║╨░ ---
 TZ_SHEET_NAME = "gen_cl"
 TZ_LOOKUP_COL = "B"
+TZ_PERIODICITY_COL = "E"
 TZ_SUFFIX_COL = "G"
 TZ_RESERVED_COL = "H"
 
 # --- ╨ó╨░╨▒╨╗╨╕╤å╤ï ╤é╤Ç╨░╨╜╤ü╨╗╨╕╤é╨╡╤Ç╨░╤å╨╕╨╕ ---
 CYRILLIC_TO_LATIN = {
-    '╨É': 'A', '╨æ': 'B', '╨Æ': 'V', '╨ô': 'G', '╨ö': 'D', '╨ò': 'E', '╨ü': 'E', '╨û': 'ZH',
-    '╨ù': 'Z', '╨ÿ': 'I', '╨Ö': 'I', '╨Ü': 'K', '╨¢': 'L', '╨£': 'M', '╨¥': 'N', '╨₧': 'O',
-    '╨ƒ': 'P', '╨á': 'R', '╨í': 'S', '╨ó': 'T', '╨ú': 'U', '╨ñ': 'F', '╨Ñ': 'KH', '╨ª': 'TS',
-    '╨º': 'CH', '╨¿': 'SH', '╨⌐': 'SHCH', '╨¬': '', '╨½': 'Y', '╨¼': '', '╨¡': 'E', '╨«': 'YU',
-    '╨»': 'YA',
+    "╨É": "A",
+    "╨æ": "B",
+    "╨Æ": "V",
+    "╨ô": "G",
+    "╨ö": "D",
+    "╨ò": "E",
+    "╨ü": "E",
+    "╨û": "ZH",
+    "╨ù": "Z",
+    "╨ÿ": "I",
+    "╨Ö": "I",
+    "╨Ü": "K",
+    "╨¢": "L",
+    "╨£": "M",
+    "╨¥": "N",
+    "╨₧": "O",
+    "╨ƒ": "P",
+    "╨á": "R",
+    "╨í": "S",
+    "╨ó": "T",
+    "╨ú": "U",
+    "╨ñ": "F",
+    "╨Ñ": "KH",
+    "╨ª": "TS",
+    "╨º": "CH",
+    "╨¿": "SH",
+    "╨⌐": "SHCH",
+    "╨¬": "",
+    "╨½": "Y",
+    "╨¼": "",
+    "╨¡": "E",
+    "╨«": "YU",
+    "╨»": "YA",
 }
-CYRILLIC_TO_LATIN.update({k.lower(): v.lower() for k, v in list(CYRILLIC_TO_LATIN.items())})
+CYRILLIC_TO_LATIN.update(
+    {k.lower(): v.lower() for k, v in list(CYRILLIC_TO_LATIN.items())}
+)
 LATIN_TO_CYRILLIC = {
-    'a': '╨░', 'b': '╨▒', 'v': '╨▓', 'g': '╨│',
-    'A': '╨É', 'B': '╨æ', 'V': '╨Æ', 'G': '╨ô',
+    "a": "╨░",
+    "b": "╨▒",
+    "v": "╨▓",
+    "g": "╨│",
+    "A": "╨É",
+    "B": "╨æ",
+    "V": "╨Æ",
+    "G": "╨ô",
+}
+
+
+PERIODICITY_LATIN_MAP = {
+    "╨£": "M",
+    "╨╝": "m",
+    "╨ô": "G",
+    "╨│": "g",
 }
 
 
+class PlannedFolder(TypedDict):
+    folder_name: str
+    suffix: str | None
+    grouping_key: str
+    file_paths: list[Path]
+
+
 class TzSuffixResolver:
     """╨ù╨░╨│╤Ç╤â╨╢╨░╨╡╤é ╤ä╨░╨╣╨╗ TZ_glob.xlsx ╨╕ ╨┐╤Ç╨╡╨┤╨╛╤ü╤é╨░╨▓╨╗╤Å╨╡╤é ╨┐╨╛╨╕╤ü╨║ ╤ü╤â╤ä╤ä╨╕╨║╤ü╨╛╨▓ ╨┤╨╗╤Å ╨╕╨╜╨┤╨╡╨║╤ü╨╛╨▓."""
 
@@ -63,6 +115,7 @@ class TzSuffixResolver:
 
         sheet = workbook[TZ_SHEET_NAME]
         self._lookup_idx = column_index_from_string(TZ_LOOKUP_COL) - 1
+        self._periodicity_idx = column_index_from_string(TZ_PERIODICITY_COL) - 1
         self._suffix_idx = column_index_from_string(TZ_SUFFIX_COL) - 1
         self._reserved_idx = column_index_from_string(TZ_RESERVED_COL) - 1
         self._rows = tuple(sheet.iter_rows(values_only=True))
@@ -90,7 +143,22 @@ class TzSuffixResolver:
         text = str(value).strip()
         return text or None
 
-    def find_suffix(self, lookup_key: str, reserved_code: str | None = None) -> str | None:
+    @staticmethod
+    def _normalize_periodicity(value: object | None) -> str | None:
+        if value is None:
+            return None
+        text = str(value).strip()
+        if not text:
+            return None
+        transliterated = "".join(PERIODICITY_LATIN_MAP.get(ch, ch) for ch in text)
+        return transliterated.upper()
+
+    def find_suffix(
+        self,
+        lookup_key: str,
+        reserved_code: str | None = None,
+        periodicity_code: str | None = None,
+    ) -> str | None:
         """╨Æ╨╛╨╖╨▓╤Ç╨░╤ë╨░╨╡╤é ╨┐╨╛╨┤╤à╨╛╨┤╤Å╤ë╨╕╨╣ ╤ü╤â╤ä╤ä╨╕╨║╤ü ╨┐╨╛ ╨╕╨╜╨┤╨╡╨║╤ü╤â ╨╕ ╨║╨╛╨┤╤â Reserved."""
         normalized_lookup = lookup_key.strip()
         if not normalized_lookup:
@@ -103,23 +171,44 @@ class TzSuffixResolver:
             lookup_variants.add(variant.lower())
 
         normalized_reserved = self._normalize_reserved(reserved_code)
+        normalized_periodicity = self._normalize_periodicity(periodicity_code)
         fallback: str | None = None
 
         for row in self._rows:
-            if len(row) <= max(self._lookup_idx, self._suffix_idx):
+            if len(row) <= max(
+                self._lookup_idx, self._suffix_idx, self._periodicity_idx
+            ):
                 continue
 
-            row_lookup_raw = row[self._lookup_idx] if len(row) > self._lookup_idx else None
+            row_lookup_raw = (
+                row[self._lookup_idx] if len(row) > self._lookup_idx else None
+            )
             row_lookup = self._normalize_lookup(row_lookup_raw)
             if row_lookup not in lookup_variants:
                 continue
 
-            row_suffix_raw = row[self._suffix_idx] if len(row) > self._suffix_idx else None
+            row_periodicity_raw = (
+                row[self._periodicity_idx] if len(row) > self._periodicity_idx else None
+            )
+            row_periodicity = self._normalize_periodicity(row_periodicity_raw)
+
+            if normalized_periodicity:
+                if row_periodicity != normalized_periodicity:
+                    continue
+            else:
+                if row_periodicity:
+                    continue
+
+            row_suffix_raw = (
+                row[self._suffix_idx] if len(row) > self._suffix_idx else None
+            )
             suffix = self._normalize_suffix(row_suffix_raw)
             if not suffix:
                 continue
 
-            row_reserved_raw = row[self._reserved_idx] if len(row) > self._reserved_idx else None
+            row_reserved_raw = (
+                row[self._reserved_idx] if len(row) > self._reserved_idx else None
+            )
             row_reserved = self._normalize_reserved(row_reserved_raw)
 
             if normalized_reserved:
@@ -135,12 +224,12 @@ class TzSuffixResolver:
 
 def transliterate_cyrillic_to_latin(text: str) -> str:
     """╨ƒ╤Ç╨╡╨╛╨▒╤Ç╨░╨╖╤â╨╡╤é ╤ü╤é╤Ç╨╛╨║╤â, ╨╖╨░╨╝╨╡╨╜╤Å╤Å ╨║╨╕╤Ç╨╕╨╗╨╗╨╕╤å╤â ╨╜╨░ ╨╗╨░╤é╨╕╨╜╨╕╤å╤â ╨┤╨╗╤Å ╨╕╨╝╤æ╨╜ ╨┤╨╕╤Ç╨╡╨║╤é╨╛╤Ç╨╕╨╣."""
-    return ''.join(CYRILLIC_TO_LATIN.get(ch, ch) for ch in text)
+    return "".join(CYRILLIC_TO_LATIN.get(ch, ch) for ch in text)
 
 
 def extract_reserved_value(grouping_key: str) -> str | None:
     """╨ÿ╨╖╨▓╨╗╨╡╨║╨░╨╡╤é ╨╖╨╜╨░╤ç╨╡╨╜╨╕╨╡ Reserved ╨╕╨╖ ╨║╨╗╤Ä╤ç╨░ ╨│╤Ç╤â╨┐╨┐╤ï ╨▓╨╕╨┤╨░ `II.1.4-02-C`."""
-    parts = grouping_key.split('-')
+    parts = grouping_key.split("-")
     if len(parts) < 2:
         return None
 
@@ -151,9 +240,18 @@ def extract_reserved_value(grouping_key: str) -> str | None:
     return candidate.zfill(2) if candidate.isdigit() else candidate.upper()
 
 
+def extract_periodicity_value(grouping_key: str) -> str | None:
+    """╨Æ╨╛╨╖╨▓╤Ç╨░╤ë╨░╨╡╤é ╨╖╨╜╨░╤ç╨╡╨╜╨╕╨╡ ╨┐╨╡╤Ç╨╕╨╛╨┤╨╕╤ç╨╜╨╛╤ü╤é╨╕ ╨╕╨╖ ╨║╨╗╤Ä╤ç╨░ ╨│╤Ç╤â╨┐╨┐╤ï (`...-XX`)."""
+    parts = grouping_key.split("-")
+    if len(parts) < 3:
+        return None
+    value = parts[2].strip()
+    return value or None
+
+
 def _group_files(source_dir: Path) -> dict[str, list[Path]]:
     grouped: dict[str, list[Path]] = defaultdict(list)
-    for file_path in source_dir.rglob('*'):
+    for file_path in source_dir.rglob("*"):
         if not file_path.is_file():
             continue
 
@@ -215,60 +313,79 @@ def prepare_index_folders(
         raise ValueError("╨¥╨╡ ╤â╨┤╨░╨╗╨╛╤ü╤î ╨╜╨░╨╣╤é╨╕ ╤ä╨░╨╣╨╗╤ï ╤ü ╨╕╨╜╨┤╨╡╨║╤ü╨░╨╝╨╕ ╨▓ ╨▓╤ï╨▒╤Ç╨░╨╜╨╜╨╛╨╝ ╨║╨░╤é╨░╨╗╨╛╨│╨╡.")
 
     resolver = TzSuffixResolver(tz_file_path)
-    
-    planned_folders = []
-    items_without_suffix = []
+
+    planned_folders: list[PlannedFolder] = []
+    items_without_suffix: list[str] = []
 
     for grouping_key, file_paths in sorted(files_by_key.items()):
         folder_name: str
         suffix: str | None
 
-        if grouping_key.upper().endswith('-C'):
+        if grouping_key.upper().endswith("-C"):
             folder_name = transliterate_cyrillic_to_latin(grouping_key)
             suffix = None  # ╨ú C-╨│╤Ç╤â╨┐╨┐ ╨╜╨╡╤é ╤ü╤â╤ä╤ä╨╕╨║╤ü╨░
         else:
             index_match = RE_INDEX_CODE.search(grouping_key)
             if not index_match:
-                _notify(status_callback, f"╨ƒ╤Ç╨╛╨┐╤â╤ü╨║: ╨╜╨╡ ╤â╨┤╨░╨╗╨╛╤ü╤î ╨▓╤ï╨┤╨╡╨╗╨╕╤é╤î ╨╕╨╜╨┤╨╡╨║╤ü ╨╕╨╖ {grouping_key}.")
+                _notify(
+                    status_callback,
+                    f"╨ƒ╤Ç╨╛╨┐╤â╤ü╨║: ╨╜╨╡ ╤â╨┤╨░╨╗╨╛╤ü╤î ╨▓╤ï╨┤╨╡╨╗╨╕╤é╤î ╨╕╨╜╨┤╨╡╨║╤ü ╨╕╨╖ {grouping_key}.",
+                )
                 continue
 
             index_code = index_match.group(1)
             reserved_code = extract_reserved_value(grouping_key)
-            suffix = resolver.find_suffix(index_code, reserved_code)
-            
+            periodicity_code = extract_periodicity_value(grouping_key)
+            suffix = resolver.find_suffix(index_code, reserved_code, periodicity_code)
+
             if not suffix:
-                items_without_suffix.append(f"{index_code} (Reserved={reserved_code or 'ΓÇö'})")
+                items_without_suffix.append(
+                    f"{index_code} (Reserved={reserved_code or 'ΓÇö'}; Periodicity={periodicity_code or 'ΓÇö'})"
+                )
                 if not group_by_suffix:
-                    _notify(status_callback, f"╨¥╨╡╤é ╤ü╤â╤ä╤ä╨╕╨║╤ü╨░ ╨┤╨╗╤Å {index_code} (Reserved={reserved_code or 'ΓÇö'}).")
+                    _notify(
+                        status_callback,
+                        "╨¥╨╡╤é ╤ü╤â╤ä╤ä╨╕╨║╤ü╨░ ╨┤╨╗╤Å "
+                        f"{index_code} (Reserved={reserved_code or 'ΓÇö'}; Periodicity={periodicity_code or 'ΓÇö'}).",
+                    )
                     continue
-            
+
             latin_key = transliterate_cyrillic_to_latin(grouping_key)
             folder_name = f"{latin_key}_{suffix}" if suffix else latin_key
 
-        planned_folders.append({
-            "folder_name": folder_name,
-            "suffix": suffix,
-            "grouping_key": grouping_key,
-            "file_paths": file_paths,
-        })
+        planned_folders.append(
+            {
+                "folder_name": folder_name,
+                "suffix": suffix,
+                "grouping_key": grouping_key,
+                "file_paths": file_paths,
+            }
+        )
 
     if group_by_suffix and items_without_suffix:
-        error_msg = "╨¥╨╡╨▓╨╛╨╖╨╝╨╛╨╢╨╜╨╛ ╤ü╨│╤Ç╤â╨┐╨┐╨╕╤Ç╨╛╨▓╨░╤é╤î ╨┐╨╛ ╤ü╤â╤ä╤ä╨╕╨║╤ü╤â. ╨¥╨╡ ╨╜╨░╨╣╨┤╨╡╨╜╤ï ╤ü╤â╤ä╤ä╨╕╨║╤ü╤ï ╨┤╨╗╤Å ╤ü╨╗╨╡╨┤╤â╤Ä╤ë╨╕╤à ╨│╤Ç╤â╨┐╨┐:\n\n" + "\n".join(items_without_suffix)
+        error_msg = (
+            "╨¥╨╡╨▓╨╛╨╖╨╝╨╛╨╢╨╜╨╛ ╤ü╨│╤Ç╤â╨┐╨┐╨╕╤Ç╨╛╨▓╨░╤é╤î ╨┐╨╛ ╤ü╤â╤ä╤ä╨╕╨║╤ü╤â. ╨¥╨╡ ╨╜╨░╨╣╨┤╨╡╨╜╤ï ╤ü╤â╤ä╤ä╨╕╨║╤ü╤ï ╨┤╨╗╤Å ╤ü╨╗╨╡╨┤╤â╤Ä╤ë╨╕╤à ╨│╤Ç╤â╨┐╨┐:\n\n"
+            + "\n".join(items_without_suffix)
+        )
         raise ValueError(error_msg)
 
     created_dirs: list[Path] = []
     for plan in planned_folders:
         base_dir = destination_dir
         # ╨ò╤ü╨╗╨╕ ╨│╤Ç╤â╨┐╨┐╨╕╤Ç╨╛╨▓╨║╨░ ╨▓╨║╨╗╤Ä╤ç╨╡╨╜╨░ ╨╕ ╤ü╤â╤ä╤ä╨╕╨║╤ü ╨╡╤ü╤é╤î, ╤ü╨╛╨╖╨┤╨░╨╡╨╝ ╨┐╨╛╨┤╨┐╨░╨┐╨║╤â
-        if group_by_suffix and plan["suffix"]:
-            base_dir = destination_dir / plan["suffix"]
-        
+        suffix_value = plan["suffix"]
+        if group_by_suffix and suffix_value:
+            base_dir = destination_dir / suffix_value
+
         target_dir = base_dir / plan["folder_name"]
         target_dir.mkdir(parents=True, exist_ok=True)
         if target_dir not in created_dirs:
             created_dirs.append(target_dir)
 
-        _notify(status_callback, f"╨ô╤Ç╤â╨┐╨┐╨░ {plan['grouping_key']} ΓåÆ {target_dir.relative_to(destination_dir)}")
+        _notify(
+            status_callback,
+            f"╨ô╤Ç╤â╨┐╨┐╨░ {plan['grouping_key']} ΓåÆ {target_dir.relative_to(destination_dir)}",
+        )
 
         for file_path in plan["file_paths"]:
             transferred_path = _transfer_file(file_path, target_dir, is_copy=use_copy)
@@ -279,8 +396,9 @@ def prepare_index_folders(
 
 
 __all__ = [
-    'prepare_index_folders',
-    'transliterate_cyrillic_to_latin',
-    'extract_reserved_value',
-    'TzSuffixResolver',
+    "prepare_index_folders",
+    "transliterate_cyrillic_to_latin",
+    "extract_reserved_value",
+    "extract_periodicity_value",
+    "TzSuffixResolver",
 ]
diff --git a/tests/test_index_folder_builder.py b/tests/test_index_folder_builder.py
index 9325ad3..4e15e43 100644
--- a/tests/test_index_folder_builder.py
+++ b/tests/test_index_folder_builder.py
@@ -5,14 +5,18 @@ from openpyxl import Workbook
 from index_folder_builder import prepare_index_folders
 
 
-def _build_tz_file(path: Path, rows: list[tuple[str, str, str | None]]) -> None:
+def _build_tz_file(
+    path: Path, rows: list[tuple[str, str | None, str, str | None]]
+) -> None:
     """╨í╨╛╨╖╨┤╨░╤æ╤é ╤Ç╨░╨▒╨╛╤ç╤â╤Ä ╨║╨╜╨╕╨│╤â TZ_glob.xlsx ╤ü ╤â╨║╨░╨╖╨░╨╜╨╜╤ï╨╝╨╕ ╤ü╤é╤Ç╨╛╨║╨░╨╝╨╕."""
     wb = Workbook()
     ws = wb.active
     ws.title = "gen_cl"
 
-    for idx, (lookup, suffix, reserved) in enumerate(rows, start=1):
+    for idx, (lookup, periodicity, suffix, reserved) in enumerate(rows, start=1):
         ws.cell(row=idx, column=2, value=lookup)
+        if periodicity is not None:
+            ws.cell(row=idx, column=5, value=periodicity)
         ws.cell(row=idx, column=7, value=suffix)
         if reserved is not None:
             ws.cell(row=idx, column=8, value=reserved)
@@ -28,7 +32,7 @@ def test_prepare_index_folders_groups_files_and_moves(tmp_path: Path) -> None:
     destination_dir.mkdir()
 
     tz_file = tmp_path / "TZ_glob.xlsx"
-    _build_tz_file(tz_file, [("II.7.4", "GST", "00")])
+    _build_tz_file(tz_file, [("II.7.4", "1╨ô", "GST", "00")])
 
     files = [
         "CT-AAA-TRA-II.7.4-00-1G-20250101-00.pdf",
@@ -70,7 +74,7 @@ def test_prepare_index_folders_raises_when_no_matching_files(tmp_path: Path) ->
     destination_dir.mkdir()
 
     tz_file = tmp_path / "TZ_glob.xlsx"
-    _build_tz_file(tz_file, [("II.7.4", "GST", "00")])
+    _build_tz_file(tz_file, [("II.7.4", "1╨ô", "GST", "00")])
 
     (source_dir / "irrelevant.txt").write_text("noop", encoding="utf-8")
 
